{
  "name": "nrepl-client",
  "version": "0.1.2",
  "description": "node client to interact with a Clojure nREPL server.",
  "main": "index.js",
  "scripts": {
    "test": "node_modules/nodeunit/bin/nodeunit tests.js --reporter minimal"
  },
  "keywords": [
    "Clojure",
    "ClojureScript",
    "nrepl"
  ],
  "author": {
    "name": "Robert Krahn"
  },
  "license": "MIT",
  "dependencies": {
    "async": "~0.2",
    "bencode": "~0.4.3"
  },
  "devDependencies": {
    "nodeunit": "~0.8"
  },
  "readme": "# node.js nREPL client [![Build Status](https://travis-ci.org/rksm/node-nrepl-client.png?branch=master)](https://travis-ci.org/rksm/node-nrepl-client)\n\nConnects node.js to a [Clojure nrepl server](https://github.com/clojure/tools.nrepl).\n\n## Usage\n\nTo connect to a running nREPL server and send and receive an eval request do:\n\n```js\nvar nreplClient = require('nrepl-client'),\n    con = nreplClient.connect({port: 7888});\ncon.once('connect', function() {\n    con.eval('(+ 3 4)', function(err, result) {\n        console.log('%s -> %s', expr, err || result);\n        con.end();\n    });    \n});\n```\n\nTo also start an nREPL server from node do:\n\n```js\nvar nreplClient = require('nrepl-client');\nvar nreplServer = require('nrepl-client/nrepl-server');\nvar async = require(\"async\");\nvar port = 7888;\n\nasync.series([\n    function(next) { nreplServer.startServer(port, next); },\n    function(next) {\n        var con = nreplClient.connect({port: port});\n        con.once('connect', function() {\n            con.eval('(+ 3 4)', function(err, result) {\n                console.log('eval result = %s', result);\n                con.end(); next();\n            });    \n        });\n    },\n    function(next) { nreplServer.stopServer(port, next); }\n], function() { console.log('Done'); });\n```\n\n## API\n\n### `nrepl-client`\n\n* `connect(options)`\n  * Creates a [`net.Socket`](http://nodejs.org/api/net.html#net_class_net_socket)\n    connection to an nREPL server\n  * `options`: options from the [`net.connect`](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n    call.\n  * returns a `net.Socket` clojure connection\n\n* clojure connection\n  * Wraps [nREPL messages](https://github.com/clojure/tools.nrepl#messages).\n  * `eval(code, callback)`\n\n### `nrepl-client/nrepl-server`\n\n* `startServer(port, callback)`\n  * `port` the port the nREPL server should be started on\n  * `callback(err, server)` function called when the server is started\n\n* `stopServer(port, callback)`\n  * `port` port of nREPL server that should be stopped\n  * `callback(err)` function called when the server is stopped\n",
  "readmeFilename": "README.md",
  "_id": "nrepl-client@0.1.2",
  "dist": {
    "shasum": "a1026651f6abc3282e251ee8ebdd5dc0a8ec333d"
  },
  "_from": "nrepl-client@0.1.2",
  "_resolved": "https://registry.npmjs.org/nrepl-client/-/nrepl-client-0.1.2.tgz"
}
